Lessons Learned (Simple Mistake Documentation Sheet):

DEC 01 2020:
1) When including programming arguments in Eclipse use the whole file name and think like this moving forward.
Because IDE's don't recognize the "." when formatting arguments.  

2) Have a way to test before you start putting keys to the IDE otherwise you are just spinning your wheels.

3) Its better to go over a razor blade at a snails pace.

4) Don't push yourself needlessly and always ask yourself "HOW AM I GOING TO TEST THIS THING?"

5) I know this is hard for you because you like to run before you can walk but you must learn to think about your edge cases first
otherwise you are doomed to waste time needlessly.

DEC 02 2020:
1) Feel free do describe the surrounding facts of the problem you are having to yourself to step out of your head. 
In this case please describe the problem of "backwash" when it comes to the percolation problem. 

2) Don't think you are stupid for not understanding something. Think and call yourself prideful and stupid when you don't read and 
make assumptions about the problem. This refers to to Percolation Stats it gave you everything that you needed to do it correctly but you didnt read
(Monte Carlo simulation. To estimate the percolation threshold, consider the following computational experiment:

    Initialize all sites to be blocked.

    Repeat the following until the system percolates:

        Choose a site uniformly at random among all blocked sites.

        Open the site. 

    The fraction of sites that are opened when the system percolates provides an estimate of the percolation threshold. )
    
3) Worry about understanding the entire problem faster rather than just implementing a solution that doesn't work fast.

DEC 04 2020:
1) Test to see if your assumptions are actually putting out what you assume. 
In this case it was in regards to the row and col never moved passed 1 and 1 when opening a site at random.

			while(!pad.percolates()) {
    			row = StdRandom.uniform(1, size + 1);
    			col = StdRandom.uniform(1, size + 1);
    			
    			//System.out.println("Row: " +row + " Col: "+col);
    			pad.open(row, col);
    		} 
    		
DEC 05 2020:
1) Start making your variable names verbose because you thought this.size = 25 when in actuality it equaled 5 and messed up a calculation.

//    	for (int runner = 0; runner < this.openSiteList.length; runner++) {
//    		
//    		
//    		System.out.println(((double)this.openSiteList[runner]/((double)this.size * (double)this.size)));
//    		this.simMean += ((double)this.openSiteList[runner]/(double)this.size * (double)this.size);
//    	}
//
//    	System.out.println("Sim Mean After Loop: " + this.simMean);
//    	
//    	
//    	this.simMean = (this.simMean/((double)this.size * (double)this.size));
//    	this.simMean = this.simMean/ this.tries;
//    	System.out.println("Sim Mean After / tires: " + this.simMean);


DEC 08 2020:
1) Why when checking for primes you only need to go to the sqare root
https://stackoverflow.com/questions/5811151/why-do-we-check-up-to-the-square-root-of-a-prime-number-to-determine-if-it-is-pr

2) How to break down numbers



JAN 01 2021:

1) How to format code in eclipse:
Go to Source | Format Document or press Ctrl+Shift+F.

JAN 05 2021:
Inheritance: has an object relationship of i Is - A (A Dolphin is a mamal, A cat is a mamal they can both inherit from a super mamal class).
Composition: has an object relationship of Has - A. (A lawn mower has an engine, A car has an engine they both are composed of an engine).

JAN 15 2021:
Encapsulation: Keeping the functionality in the object rather than spreading it out. 

