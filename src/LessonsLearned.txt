Lessons Learned (Simple Mistake Documentation Sheet):

DEC 01 2020:
1) When including programming arguments in Eclipse use the whole file name and think like this moving forward.
Because IDE's don't recognize the "." when formatting arguments.  

2) Have a way to test before you start putting keys to the IDE otherwise you are just spinning your wheels.

3) Its better to go over a razor blade at a snails pace.

4) Don't push yourself needlessly and always ask yourself "HOW AM I GOING TO TEST THIS THING?"

5) I know this is hard for you because you like to run before you can walk but you must learn to think about your edge cases first
otherwise you are doomed to waste time needlessly.

DEC 02 2020:
1) Feel free do describe the surrounding facts of the problem you are having to yourself to step out of your head. 
In this case please describe the problem of "backwash" when it comes to the percolation problem. 

2) Don't think you are stupid for not understanding something. Think and call yourself prideful and stupid when you don't read and 
make assumptions about the problem. This refers to to Percolation Stats it gave you everything that you needed to do it correctly but you didnt read
(Monte Carlo simulation. To estimate the percolation threshold, consider the following computational experiment:

    Initialize all sites to be blocked.

    Repeat the following until the system percolates:

        Choose a site uniformly at random among all blocked sites.

        Open the site. 

    The fraction of sites that are opened when the system percolates provides an estimate of the percolation threshold. )
    
3) Worry about understanding the entire problem faster rather than just implementing a solution that doesn't work fast.

DEC 04 2020:
1) Test to see if your assumptions are actually putting out what you assume. 
In this case it was in regards to the row and col never moved passed 1 and 1 when opening a site at random.

			while(!pad.percolates()) {
    			row = StdRandom.uniform(1, size + 1);
    			col = StdRandom.uniform(1, size + 1);
    			
    			//System.out.println("Row: " +row + " Col: "+col);
    			pad.open(row, col);
    		} 
    		
DEC 05 2020:
1) Start making your variable names verbose because you thought this.size = 25 when in actuality it equaled 5 and messed up a calculation.

//    	for (int runner = 0; runner < this.openSiteList.length; runner++) {
//    		
//    		
//    		System.out.println(((double)this.openSiteList[runner]/((double)this.size * (double)this.size)));
//    		this.simMean += ((double)this.openSiteList[runner]/(double)this.size * (double)this.size);
//    	}
//
//    	System.out.println("Sim Mean After Loop: " + this.simMean);
//    	
//    	
//    	this.simMean = (this.simMean/((double)this.size * (double)this.size));
//    	this.simMean = this.simMean/ this.tries;
//    	System.out.println("Sim Mean After / tires: " + this.simMean);


DEC 08 2020:
1) Why when checking for primes you only need to go to the sqare root
https://stackoverflow.com/questions/5811151/why-do-we-check-up-to-the-square-root-of-a-prime-number-to-determine-if-it-is-pr

2) How to break down numbers



JAN 01 2021:

1) How to format code in eclipse:
Go to Source | Format Document or press Ctrl+Shift+F.

JAN 05 2021:
Inheritance: has an object relationship of i Is - A (A Dolphin is a mamal, A cat is a mamal they can both inherit from a super mamal class).
Composition: has an object relationship of Has - A. (A lawn mower has an engine, A car has an engine they both are composed of an engine).

JAN 15 2021:
Encapsulation: Keeping the functionality in the object rather than spreading it out.


APRIL 18 2021:

Interfaces: A contract with classes that says that the specified method signatures and vairables will not change.
Any class that implements an interface must also implement the methods of that interface to work. 
You can implement several interfaces. 

Where to create an interface? What can all your final objects do?
Not all animals can walk but we can create a walk interface.
Birds can walk and they can also fly!
So we can create a fly interface. 

 
4 Types of nested Classes 
- Static nested classes
- Non Static nested class or Inner class
- Local class defined inside a scope block like a method
- Anonymous class which is a class with out a class name.


Inheritance: has an object relationship of i Is - A (A Dolphin is a mamal, A cat is a mamal they can both inherit from a super mamal class).
Composition: has an object relationship of Has - A. (A lawn mower has an engine, A car has an engine they both are composed of an engine).

Inheritance = a dog is an animal
Can (Interface) = a parrot and bird can fly
Abstraction = all animals can eat

Abstract Class

- Abstract Classes are similar to interfaces. You cannot instantiate them 
and they may contain a mix of methods deckared with or without an implementation

- You can declare fields that are not static and final and define public 
protect and private concrete methods.

- Can extend only one parent class but it can implement multiple interfaces.

- When an abstract class is subclassed the sub class usually provides implementations
for all of the abstract methods in its parent class.

- However if it does not then the subclass must also be declared abstract. 


Use an Abstract class when

- You want to share code among several closely related classes

- You expect classes that extend your abstract class to have many common
methods or fields or required access modifiers other than public. 

- You want to declare non staic or non final fields (for example name, age)
this enables you to define methods that can access and modify the state of an object
(getName setName).


Interface Class

- An interface is jsut the declaration of methods of a Class its not the implementation

- In an interface we deine what kind of operation an object can perform. These operations
are defined by the classes that implement the Interface.

- Interfaces form a contact between the class and the outside world and this 
contract is enforced at build time by the compiler.

- Interfaces are more flexible and can deal with a lot more stress on the design of your 
program than the implementation.

- By introducing interfaces into your program you are really introduce points of variation
at which you can plug in different implementations for that interface. An interfaces primary 
purpose is abstraction, decoupling the what form the how. 

- Since Java 8 Interfaces can contain default methods. The keyword default is used mostly 
for backwards compatibility and static methods as well before Java 8 that was not possible. 


When do you want to use an Interface

- You expect that unrelated classes will implement your interface. For example
the interfaces Comparable and Cloneable are implemented by many unrelated classes. 

- You want to specify the behaviour of a particular data type but you are not concerned about 
who implments its behaviour. 

- You want to sperate different behaviour.

- The collections API is an excellent example we have the List interface and implementations
ArrayList and LinkedLIst


May 02 2021:
- You can extend from only one class but you can implement multiple interfaces. 
- Class first then the interfaces. 
- Using multiple bounds for creating when making a class a generic
<T extends Player & Coach & Manager>





